// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  ADMIN
  USER
}


model User {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  // username              String?
  name                  String?
  email                 String?    @unique
  emailVerified         DateTime?  @map("email_verified")
  image                 String?
  mobilenumber          String?
  password              String?
  role                  UserRoles  @default(USER)
  accounts              Account[]
  category              Category[]  @relation("UserCategory")
  expenses              Expense[]  @relation("UserExpenses")
  isTwofactorEnabled    Boolean    @default(false)
  twoFactorConfirmation TwoFactorConfirmation? @relation("UserTwoFactorConfirmation")

  @@map("users") // Maps to 'users' collection in MongoDB
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String?
  userId      String   @db.ObjectId
  user        User     @relation("UserExpenses", fields: [userId], references: [id])
  categoryId  String   @db.ObjectId
  category    Category @relation("CategoryExpenses", fields: [categoryId], references: [id])
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId], map: "userId_idx")        // Index for quick querying by userId
  @@index([categoryId], map: "categoryname_idx") // Index for quick querying by categoryId
  @@map("expenses") // Maps to 'expenses' collection in MongoDB
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    
  userId    String    @db.ObjectId
  user      User      @relation("UserCategory", fields: [userId], references: [id])
  expenses  Expense[] @relation("CategoryExpenses")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories") // Maps to 'categories' collection in MongoDB
  @@unique([name, userId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId // Primary key using MongoDB ObjectId
  email   String   // Typically the email or user identifier
  token   String   @unique // Unique verification token
  expires DateTime // Expiration date of the token

  @@unique([email, token]) // Ensures uniqueness of the email-token pair
  @@map("verificationtokens") // Maps to 'verificationtokens' collection in MongoDB
}


model ResetVerificationToken {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String    @unique
  expires DateTime

  @@unique([email, token])
  @@map("resetverificationtokens")
}

model TwoFactorToken {
  id      String    @id @default(auto()) @map("_id")  @db.ObjectId
  email   String
  token   String    @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String    @id @default(auto())  @map("_id") @db.ObjectId
  userId  String    @db.ObjectId
  user    User      @relation("UserTwoFactorConfirmation", fields: [userId], references: [id])

  @@unique([userId])
}